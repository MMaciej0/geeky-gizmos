generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Product {
  id          Int                 @id @default(autoincrement())
  slug        String              @unique
  name        String
  brand       Brand               @relation(fields: [brandId], references: [id])
  brandId     Int
  description String
  imageUrl    String
  price       Float
  stock       Int
  categories  CategoryToProduct[]
  approved    Boolean             @default(false)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  @@map("products")
}

model Category {
  id       Int                 @id @default(autoincrement())
  name     String
  imageUrl String
  products CategoryToProduct[]

  @@map("categories")
}

model Brand {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]

  @@map("brands")
}

model CategoryToProduct {
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  @@id([productId, categoryId])
  @@map("categoryToProduct")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  accounts      Account[]

  @@map("users")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}
